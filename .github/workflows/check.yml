name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
env:
  DOTNET_VERSION: "8.x"
  TEST_EMAIL_1: ${{ secrets.TEST_EMAIL_1 }}
  TEST_EMAIL_2: ${{ secrets.TEST_EMAIL_2 }}
  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
  TEST_PASSWORD_NEW: ${{ secrets.TEST_PASSWORD }}
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

      - name: Build
        run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

  unit_tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

      - name: Build
        run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

      - name: Unit Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.Test/ProdMonitor.Test.csproj --configuration Release --no-restore --no-build --logger "console;verbosity=detailed"

  integration_tests:
    runs-on: ubuntu-latest
    needs: unit_tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

      - name: Build
        run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

      - name: AssemblyLines Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.AssemblyLineIntegrationTests" --configuration Release --no-restore --no-build

      - name: Details Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.DetailIntegrationTests" --configuration Release --no-restore --no-build
      
      - name: DetailOrders Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.DetailOrderIntegrationTests" --configuration Release --no-restore --no-build

      - name: ServiceReports Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.ServiceReportIntegrationTests" --configuration Release --no-restore --no-build
      
      - name: ServiceRequests Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.ServiceRequestIntegrationTests" --configuration Release --no-restore --no-build

      - name: Tractors Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.TractorIntegrationTests" --configuration Release --no-restore --no-build

      - name: Users Integration Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.sln --filter "FullyQualifiedName~ProdMonitor.IntegrationTests.UserIntegrationTests" --configuration Release --no-restore --no-build

  e2e_tests:
    runs-on: ubuntu-latest
    needs: integration_tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

      - name: Build
        run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

      - name: E2E Tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.E2E/ProdMonitor.E2E.csproj --configuration Release --no-restore --no-build --logger "console;verbosity=detailed"

  bdd_tests:
    runs-on: ubuntu-latest
    needs: e2e_tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

      - name: Build
        run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Start API service
        run: |
          docker-compose -f ./src/ProdMonitor/docker-compose.yml up -d
        if: success()
      
      - name: Wait for API to be ready
        run: |
          until curl -sSf http://localhost:5091/api/v1/index.html; do
            echo "Waiting for API..."
            sleep 5
          done
        timeout-minutes: 2

      - name: Run tests
        run: dotnet test ./src/ProdMonitor/ProdMonitor.BDDTests/ProdMonitor.BDDTests.csproj --configuration Release --no-restore --no-build --logger "console;verbosity=detailed"

  sonar_qube:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # 1. Чекаут кода
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Установка .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # 3. Установка SonarScanner
    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    # 4. Восстановление зависимостей
    - name: Restore
      run: dotnet restore ./src/ProdMonitor/ProdMonitor.sln

    # 5. Запуск SonarScanner
    - name: Start SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin \
          /k:"ProdMonitor" \
          /d:sonar.host.url="http://localhost:9000" \
          /d:sonar.token="$SONAR_TOKEN"

    # 6. Сборка проекта
    - name: Build
      run: dotnet build ./src/ProdMonitor/ProdMonitor.sln --configuration Release --no-restore

    # 7. Завершение анализа SonarQube
    - name: End SonarQube analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

    # 8. Проверка Quality Gate
    - name: Check Quality Gate
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        QUALITY_GATE_STATUS=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" "http://localhost:9000/api/qualitygates/project_status?projectKey=ProdMonitor" | grep -o '"status":"[^"]*"' | cut -d':' -f2 | tr -d '"')
        echo "Quality Gate Status: $QUALITY_GATE_STATUS"
        if [ "$QUALITY_GATE_STATUS" = "ERROR" ] || [ "$QUALITY_GATE_STATUS" = "WARN" ]; then
          echo "Quality Gate failed. Aborting pipeline."
          exit 1
        else
          echo "Quality Gate passed."
        fi
