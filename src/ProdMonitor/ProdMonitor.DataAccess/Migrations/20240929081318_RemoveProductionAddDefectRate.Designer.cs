// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProdMonitor.DataAccess.Context;

#nullable disable

namespace ProdMonitor.DataAccess.Migrations
{
    [DbContext(typeof(ProdMonitorContext))]
    [Migration("20240929081318_RemoveProductionAddDefectRate")]
    partial class RemoveProductionAddDefectRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssemblyLineDbDetailDb", b =>
                {
                    b.Property<Guid>("AssemblyLinesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("AssemblyLinesId", "DetailsId");

                    b.HasIndex("DetailsId");

                    b.ToTable("AssemblyLineDbDetailDb");
                });

            modelBuilder.Entity("AssemblyLineDbTractorDb", b =>
                {
                    b.Property<Guid>("AssemblyLinesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TractorsId")
                        .HasColumnType("uuid");

                    b.HasKey("AssemblyLinesId", "TractorsId");

                    b.HasIndex("TractorsId");

                    b.ToTable("AssemblyLineDbTractorDb");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.AssemblyLineDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<float>("DefectRate")
                        .HasColumnType("real");

                    b.Property<int>("DownTime")
                        .HasColumnType("integer");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("InspectionsPerYear")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("LastInspection")
                        .HasColumnType("date");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("NextInspection")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("AssemblyLines");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.DetailDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Details");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.DetailOrderDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("DetailOrders");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.OrderDetailDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DetailOrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("DetailsAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("DetailOrderId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.ServiceReportDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LineId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ServiceReports");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.ServiceRequestDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ServiceReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("LineId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.SupplyDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DetailId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SupplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DetailId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.TractorDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("BackTireSize")
                        .HasColumnType("integer");

                    b.Property<float>("CabinHeight")
                        .HasColumnType("real");

                    b.Property<string>("EcologicalStandard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnginePower")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FrontTireSize")
                        .HasColumnType("integer");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("WheelsAmount")
                        .HasColumnType("integer");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tractors");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AssemblyLineDbDetailDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.AssemblyLineDb", null)
                        .WithMany()
                        .HasForeignKey("AssemblyLinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.DetailDb", null)
                        .WithMany()
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssemblyLineDbTractorDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.AssemblyLineDb", null)
                        .WithMany()
                        .HasForeignKey("AssemblyLinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.TractorDb", null)
                        .WithMany()
                        .HasForeignKey("TractorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.DetailOrderDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.UserDb", "User")
                        .WithMany("DetailOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.OrderDetailDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.DetailDb", "Detail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.DetailOrderDb", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DetailOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.ServiceReportDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.AssemblyLineDb", "AssemblyLine")
                        .WithMany("ServiceReports")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.ServiceRequestDb", "ServiceRequest")
                        .WithOne("ServiceReport")
                        .HasForeignKey("ProdMonitor.DataAccess.Models.ServiceReportDb", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.UserDb", "User")
                        .WithMany("ServiceReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyLine");

                    b.Navigation("ServiceRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.ServiceRequestDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.AssemblyLineDb", "AssemblyLine")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdMonitor.DataAccess.Models.UserDb", "User")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyLine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.SupplyDb", b =>
                {
                    b.HasOne("ProdMonitor.DataAccess.Models.DetailDb", "Detail")
                        .WithMany("Supplies")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.AssemblyLineDb", b =>
                {
                    b.Navigation("ServiceReports");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.DetailDb", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.DetailOrderDb", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.ServiceRequestDb", b =>
                {
                    b.Navigation("ServiceReport");
                });

            modelBuilder.Entity("ProdMonitor.DataAccess.Models.UserDb", b =>
                {
                    b.Navigation("DetailOrders");

                    b.Navigation("ServiceReports");

                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
